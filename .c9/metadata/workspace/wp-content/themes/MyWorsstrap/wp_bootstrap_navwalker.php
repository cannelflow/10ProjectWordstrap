{"filter":false,"title":"wp_bootstrap_navwalker.php","tooltip":"/wp-content/themes/MyWorsstrap/wp_bootstrap_navwalker.php","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":167,"column":1},"action":"insert","lines":["<?php","/**"," * Class Name: wp_bootstrap_navwalker"," * GitHub URI: https://github.com/twittem/wp-bootstrap-navwalker"," * Description: A custom WordPress nav walker class to implement the Bootstrap 3 navigation style in a custom theme using the WordPress built in menu manager."," * Version: 2.0.4"," * Author: Edward McIntyre - @twittem"," * License: GPL-2.0+"," * License URI: http://www.gnu.org/licenses/gpl-2.0.txt"," */","class wp_bootstrap_navwalker extends Walker_Nav_Menu {","\t/**","\t * @see Walker::start_lvl()","\t * @since 3.0.0","\t *","\t * @param string $output Passed by reference. Used to append additional content.","\t * @param int $depth Depth of page. Used for padding.","\t */","\tpublic function start_lvl( &$output, $depth = 0, $args = array() ) {","\t\t$indent = str_repeat( \"\\t\", $depth );","\t\t$output .= \"\\n$indent<ul role=\\\"menu\\\" class=\\\" dropdown-menu\\\">\\n\";","\t}","\t/**","\t * @see Walker::start_el()","\t * @since 3.0.0","\t *","\t * @param string $output Passed by reference. Used to append additional content.","\t * @param object $item Menu item data object.","\t * @param int $depth Depth of menu item. Used for padding.","\t * @param int $current_page Menu item ID.","\t * @param object $args","\t */","\tpublic function start_el( &$output, $item, $depth = 0, $args = array(), $id = 0 ) {","\t\t$indent = ( $depth ) ? str_repeat( \"\\t\", $depth ) : '';","\t\t/**","\t\t * Dividers, Headers or Disabled","\t\t * =============================","\t\t * Determine whether the item is a Divider, Header, Disabled or regular","\t\t * menu item. To prevent errors we use the strcasecmp() function to so a","\t\t * comparison that is not case sensitive. The strcasecmp() function returns","\t\t * a 0 if the strings are equal.","\t\t */","\t\tif ( strcasecmp( $item->attr_title, 'divider' ) == 0 && $depth === 1 ) {","\t\t\t$output .= $indent . '<li role=\"presentation\" class=\"divider\">';","\t\t} else if ( strcasecmp( $item->title, 'divider') == 0 && $depth === 1 ) {","\t\t\t$output .= $indent . '<li role=\"presentation\" class=\"divider\">';","\t\t} else if ( strcasecmp( $item->attr_title, 'dropdown-header') == 0 && $depth === 1 ) {","\t\t\t$output .= $indent . '<li role=\"presentation\" class=\"dropdown-header\">' . esc_attr( $item->title );","\t\t} else if ( strcasecmp($item->attr_title, 'disabled' ) == 0 ) {","\t\t\t$output .= $indent . '<li role=\"presentation\" class=\"disabled\"><a href=\"#\">' . esc_attr( $item->title ) . '</a>';","\t\t} else {","\t\t\t$class_names = $value = '';","\t\t\t$classes = empty( $item->classes ) ? array() : (array) $item->classes;","\t\t\t$classes[] = 'menu-item-' . $item->ID;","\t\t\t$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args ) );","\t\t\tif ( $args->has_children )","\t\t\t\t$class_names .= ' dropdown';","\t\t\tif ( in_array( 'current-menu-item', $classes ) )","\t\t\t\t$class_names .= ' active';","\t\t\t$class_names = $class_names ? ' class=\"' . esc_attr( $class_names ) . '\"' : '';","\t\t\t$id = apply_filters( 'nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args );","\t\t\t$id = $id ? ' id=\"' . esc_attr( $id ) . '\"' : '';","\t\t\t$output .= $indent . '<li' . $id . $value . $class_names .'>';","\t\t\t$atts = array();","\t\t\t$atts['title']  = ! empty( $item->title )\t? $item->title\t: '';","\t\t\t$atts['target'] = ! empty( $item->target )\t? $item->target\t: '';","\t\t\t$atts['rel']    = ! empty( $item->xfn )\t\t? $item->xfn\t: '';","\t\t\t// If item has_children add atts to a.","\t\t\tif ( $args->has_children && $depth === 0 ) {","\t\t\t\t$atts['href']   \t\t= '#';","\t\t\t\t$atts['data-toggle']\t= 'dropdown';","\t\t\t\t$atts['class']\t\t\t= 'dropdown-toggle';","\t\t\t\t$atts['aria-haspopup']\t= 'true';","\t\t\t} else {","\t\t\t\t$atts['href'] = ! empty( $item->url ) ? $item->url : '';","\t\t\t}","\t\t\t$atts = apply_filters( 'nav_menu_link_attributes', $atts, $item, $args );","\t\t\t$attributes = '';","\t\t\tforeach ( $atts as $attr => $value ) {","\t\t\t\tif ( ! empty( $value ) ) {","\t\t\t\t\t$value = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );","\t\t\t\t\t$attributes .= ' ' . $attr . '=\"' . $value . '\"';","\t\t\t\t}","\t\t\t}","\t\t\t$item_output = $args->before;","\t\t\t/*","\t\t\t * Glyphicons","\t\t\t * ===========","\t\t\t * Since the the menu item is NOT a Divider or Header we check the see","\t\t\t * if there is a value in the attr_title property. If the attr_title","\t\t\t * property is NOT null we apply it as the class name for the glyphicon.","\t\t\t */","\t\t\tif ( ! empty( $item->attr_title ) )","\t\t\t\t$item_output .= '<a'. $attributes .'><span class=\"glyphicon ' . esc_attr( $item->attr_title ) . '\"></span>&nbsp;';","\t\t\telse","\t\t\t\t$item_output .= '<a'. $attributes .'>';","\t\t\t$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;","\t\t\t$item_output .= ( $args->has_children && 0 === $depth ) ? ' <span class=\"caret\"></span></a>' : '</a>';","\t\t\t$item_output .= $args->after;","\t\t\t$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );","\t\t}","\t}","\t/**","\t * Traverse elements to create list from elements.","\t *","\t * Display one element if the element doesn't have any children otherwise,","\t * display the element and its children. Will only traverse up to the max","\t * depth and no ignore elements under that depth.","\t *","\t * This method shouldn't be called directly, use the walk() method instead.","\t *","\t * @see Walker::start_el()","\t * @since 2.5.0","\t *","\t * @param object $element Data object","\t * @param array $children_elements List of elements to continue traversing.","\t * @param int $max_depth Max depth to traverse.","\t * @param int $depth Depth of current element.","\t * @param array $args","\t * @param string $output Passed by reference. Used to append additional content.","\t * @return null Null on failure with no changes to parameters.","\t */","\tpublic function display_element( $element, &$children_elements, $max_depth, $depth, $args, &$output ) {","        if ( ! $element )","            return;","        $id_field = $this->db_fields['id'];","        // Display this element.","        if ( is_object( $args[0] ) )","           $args[0]->has_children = ! empty( $children_elements[ $element->$id_field ] );","        parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );","    }","\t/**","\t * Menu Fallback","\t * =============","\t * If this function is assigned to the wp_nav_menu's fallback_cb variable","\t * and a manu has not been assigned to the theme location in the WordPress","\t * menu manager the function with display nothing to a non-logged in user,","\t * and will add a link to the WordPress menu manager if logged in as an admin.","\t *","\t * @param array $args passed from the wp_nav_menu function.","\t *","\t */","\tpublic static function fallback( $args ) {","\t\tif ( current_user_can( 'manage_options' ) ) {","\t\t\textract( $args );","\t\t\t$fb_output = null;","\t\t\tif ( $container ) {","\t\t\t\t$fb_output = '<' . $container;","\t\t\t\tif ( $container_id )","\t\t\t\t\t$fb_output .= ' id=\"' . $container_id . '\"';","\t\t\t\tif ( $container_class )","\t\t\t\t\t$fb_output .= ' class=\"' . $container_class . '\"';","\t\t\t\t$fb_output .= '>';","\t\t\t}","\t\t\t$fb_output .= '<ul';","\t\t\tif ( $menu_id )","\t\t\t\t$fb_output .= ' id=\"' . $menu_id . '\"';","\t\t\tif ( $menu_class )","\t\t\t\t$fb_output .= ' class=\"' . $menu_class . '\"';","\t\t\t$fb_output .= '>';","\t\t\t$fb_output .= '<li><a href=\"' . admin_url( 'nav-menus.php' ) . '\">Add a menu</a></li>';","\t\t\t$fb_output .= '</ul>';","\t\t\tif ( $container )","\t\t\t\t$fb_output .= '</' . $container . '>';","\t\t\techo $fb_output;","\t\t}","\t}","}"],"id":1}]]},"ace":{"folds":[],"scrolltop":506,"scrollleft":0,"selection":{"start":{"row":167,"column":1},"end":{"row":167,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"php-doc-start","mode":"ace/mode/php"}},"timestamp":1485304497048,"hash":"0db2fbda536889632e9b7baf2cdc8f896c93e257"}